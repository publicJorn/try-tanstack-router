/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PeopleIndexImport } from './routes/people/index'
import { Route as PeopleAboutImport } from './routes/people/about'
import { Route as PeopleNameImport } from './routes/people/$name'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleIndexRoute = PeopleIndexImport.update({
  id: '/people/',
  path: '/people/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleAboutRoute = PeopleAboutImport.update({
  id: '/people/about',
  path: '/people/about',
  getParentRoute: () => rootRoute,
} as any)

const PeopleNameRoute = PeopleNameImport.update({
  id: '/people/$name',
  path: '/people/$name',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/people/$name': {
      id: '/people/$name'
      path: '/people/$name'
      fullPath: '/people/$name'
      preLoaderRoute: typeof PeopleNameImport
      parentRoute: typeof rootRoute
    }
    '/people/about': {
      id: '/people/about'
      path: '/people/about'
      fullPath: '/people/about'
      preLoaderRoute: typeof PeopleAboutImport
      parentRoute: typeof rootRoute
    }
    '/people/': {
      id: '/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/people/$name': typeof PeopleNameRoute
  '/people/about': typeof PeopleAboutRoute
  '/people': typeof PeopleIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/people/$name': typeof PeopleNameRoute
  '/people/about': typeof PeopleAboutRoute
  '/people': typeof PeopleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/people/$name': typeof PeopleNameRoute
  '/people/about': typeof PeopleAboutRoute
  '/people/': typeof PeopleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/people/$name' | '/people/about' | '/people'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/people/$name' | '/people/about' | '/people'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/people/$name'
    | '/people/about'
    | '/people/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  PeopleNameRoute: typeof PeopleNameRoute
  PeopleAboutRoute: typeof PeopleAboutRoute
  PeopleIndexRoute: typeof PeopleIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  PeopleNameRoute: PeopleNameRoute,
  PeopleAboutRoute: PeopleAboutRoute,
  PeopleIndexRoute: PeopleIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/people/$name",
        "/people/about",
        "/people/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/people/$name": {
      "filePath": "people/$name.tsx"
    },
    "/people/about": {
      "filePath": "people/about.tsx"
    },
    "/people/": {
      "filePath": "people/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
